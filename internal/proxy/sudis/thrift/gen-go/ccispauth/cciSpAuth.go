// Code generated by Thrift Compiler (0.19.0). DO NOT EDIT.

package ccispauth

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"regexp"
	"strings"
	"time"

	thrift "github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

type TCciSpAuthVersion int64

const (
	TCciSpAuthVersion_V1 TCciSpAuthVersion = 1
)

func (p TCciSpAuthVersion) String() string {
	switch p {
	case TCciSpAuthVersion_V1:
		return "V1"
	}
	return "<UNSET>"
}

func TCciSpAuthVersionFromString(s string) (TCciSpAuthVersion, error) {
	switch s {
	case "V1":
		return TCciSpAuthVersion_V1, nil
	}
	return TCciSpAuthVersion(0), fmt.Errorf("not a valid TCciSpAuthVersion string")
}

func TCciSpAuthVersionPtr(v TCciSpAuthVersion) *TCciSpAuthVersion { return &v }

func (p TCciSpAuthVersion) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TCciSpAuthVersion) UnmarshalText(text []byte) error {
	q, err := TCciSpAuthVersionFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *TCciSpAuthVersion) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = TCciSpAuthVersion(v)
	return nil
}

func (p *TCciSpAuthVersion) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TCciSpAuthOperationResult_ int64

const (
	TCciSpAuthOperationResult__SUCCESS                   TCciSpAuthOperationResult_ = 1
	TCciSpAuthOperationResult__ERROR_INTERNAL            TCciSpAuthOperationResult_ = 2
	TCciSpAuthOperationResult__REQUEST_REPLAY_RESTRICTED TCciSpAuthOperationResult_ = 3
	TCciSpAuthOperationResult__REQUEST_EXPIRED           TCciSpAuthOperationResult_ = 4
	TCciSpAuthOperationResult__REQUEST_NONCE_NOT_VALID   TCciSpAuthOperationResult_ = 5
	TCciSpAuthOperationResult__SP_PERMISSION_DENIED      TCciSpAuthOperationResult_ = 6
	TCciSpAuthOperationResult__SP_ACCOUNT_BLOCKED        TCciSpAuthOperationResult_ = 7
	TCciSpAuthOperationResult__SP_NOT_AUTHENTICATED      TCciSpAuthOperationResult_ = 8
)

func (p TCciSpAuthOperationResult_) String() string {
	switch p {
	case TCciSpAuthOperationResult__SUCCESS:
		return "SUCCESS"
	case TCciSpAuthOperationResult__ERROR_INTERNAL:
		return "ERROR_INTERNAL"
	case TCciSpAuthOperationResult__REQUEST_REPLAY_RESTRICTED:
		return "REQUEST_REPLAY_RESTRICTED"
	case TCciSpAuthOperationResult__REQUEST_EXPIRED:
		return "REQUEST_EXPIRED"
	case TCciSpAuthOperationResult__REQUEST_NONCE_NOT_VALID:
		return "REQUEST_NONCE_NOT_VALID"
	case TCciSpAuthOperationResult__SP_PERMISSION_DENIED:
		return "SP_PERMISSION_DENIED"
	case TCciSpAuthOperationResult__SP_ACCOUNT_BLOCKED:
		return "SP_ACCOUNT_BLOCKED"
	case TCciSpAuthOperationResult__SP_NOT_AUTHENTICATED:
		return "SP_NOT_AUTHENTICATED"
	}
	return "<UNSET>"
}

func TCciSpAuthOperationResult_FromString(s string) (TCciSpAuthOperationResult_, error) {
	switch s {
	case "SUCCESS":
		return TCciSpAuthOperationResult__SUCCESS, nil
	case "ERROR_INTERNAL":
		return TCciSpAuthOperationResult__ERROR_INTERNAL, nil
	case "REQUEST_REPLAY_RESTRICTED":
		return TCciSpAuthOperationResult__REQUEST_REPLAY_RESTRICTED, nil
	case "REQUEST_EXPIRED":
		return TCciSpAuthOperationResult__REQUEST_EXPIRED, nil
	case "REQUEST_NONCE_NOT_VALID":
		return TCciSpAuthOperationResult__REQUEST_NONCE_NOT_VALID, nil
	case "SP_PERMISSION_DENIED":
		return TCciSpAuthOperationResult__SP_PERMISSION_DENIED, nil
	case "SP_ACCOUNT_BLOCKED":
		return TCciSpAuthOperationResult__SP_ACCOUNT_BLOCKED, nil
	case "SP_NOT_AUTHENTICATED":
		return TCciSpAuthOperationResult__SP_NOT_AUTHENTICATED, nil
	}
	return TCciSpAuthOperationResult_(0), fmt.Errorf("not a valid TCciSpAuthOperationResult_ string")
}

func TCciSpAuthOperationResult_Ptr(v TCciSpAuthOperationResult_) *TCciSpAuthOperationResult_ {
	return &v
}

func (p TCciSpAuthOperationResult_) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TCciSpAuthOperationResult_) UnmarshalText(text []byte) error {
	q, err := TCciSpAuthOperationResult_FromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *TCciSpAuthOperationResult_) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = TCciSpAuthOperationResult_(v)
	return nil
}

func (p *TCciSpAuthOperationResult_) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// Attributes:
//   - SpCode
//   - SpName
type TokenDataPerm struct {
	SpCode string `thrift:"spCode,1,required" db:"spCode" json:"spCode"`
	SpName string `thrift:"spName,2,required" db:"spName" json:"spName"`
}

func NewTokenDataPerm() *TokenDataPerm {
	return &TokenDataPerm{}
}

func (p *TokenDataPerm) GetSpCode() string {
	return p.SpCode
}

func (p *TokenDataPerm) GetSpName() string {
	return p.SpName
}
func (p *TokenDataPerm) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSpCode bool = false
	var issetSpName bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetSpCode = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetSpName = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSpCode {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SpCode is not set"))
	}
	if !issetSpName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SpName is not set"))
	}
	return nil
}

func (p *TokenDataPerm) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SpCode = v
	}
	return nil
}

func (p *TokenDataPerm) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SpName = v
	}
	return nil
}

func (p *TokenDataPerm) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TokenDataPerm"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TokenDataPerm) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "spCode", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:spCode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.SpCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.spCode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:spCode: ", p), err)
	}
	return err
}

func (p *TokenDataPerm) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "spName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:spName: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.SpName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.spName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:spName: ", p), err)
	}
	return err
}

func (p *TokenDataPerm) Equals(other *TokenDataPerm) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.SpCode != other.SpCode {
		return false
	}
	if p.SpName != other.SpName {
		return false
	}
	return true
}

func (p *TokenDataPerm) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TokenDataPerm(%+v)", *p)
}

func (p *TokenDataPerm) Validate() error {
	return nil
}

// Attributes:
//   - Version
//   - RequestMillis
//   - RequestNonce
//   - SpCode
//   - TargetSpCode
type TCciSpAuthCreateTokenArgs_ struct {
	// unused fields # 1 to 9
	Version TCciSpAuthVersion `thrift:"version,10" db:"version" json:"version"`
	// unused fields # 11 to 19
	RequestMillis int64 `thrift:"requestMillis,20" db:"requestMillis" json:"requestMillis"`
	// unused fields # 21 to 29
	RequestNonce []byte `thrift:"requestNonce,30" db:"requestNonce" json:"requestNonce,omitempty"`
	// unused fields # 31 to 39
	SpCode *string `thrift:"spCode,40" db:"spCode" json:"spCode,omitempty"`
	// unused fields # 41 to 49
	TargetSpCode *string `thrift:"targetSpCode,50" db:"targetSpCode" json:"targetSpCode,omitempty"`
}

func NewTCciSpAuthCreateTokenArgs_() *TCciSpAuthCreateTokenArgs_ {
	return &TCciSpAuthCreateTokenArgs_{
		Version: 1,
	}
}

var TCciSpAuthCreateTokenArgs__Version_DEFAULT TCciSpAuthVersion = 1

func (p *TCciSpAuthCreateTokenArgs_) GetVersion() TCciSpAuthVersion {
	return p.Version
}

var TCciSpAuthCreateTokenArgs__RequestMillis_DEFAULT int64 = 0

func (p *TCciSpAuthCreateTokenArgs_) GetRequestMillis() int64 {
	return p.RequestMillis
}

var TCciSpAuthCreateTokenArgs__RequestNonce_DEFAULT []byte

func (p *TCciSpAuthCreateTokenArgs_) GetRequestNonce() []byte {
	return p.RequestNonce
}

var TCciSpAuthCreateTokenArgs__SpCode_DEFAULT string

func (p *TCciSpAuthCreateTokenArgs_) GetSpCode() string {
	if !p.IsSetSpCode() {
		return TCciSpAuthCreateTokenArgs__SpCode_DEFAULT
	}
	return *p.SpCode
}

var TCciSpAuthCreateTokenArgs__TargetSpCode_DEFAULT string

func (p *TCciSpAuthCreateTokenArgs_) GetTargetSpCode() string {
	if !p.IsSetTargetSpCode() {
		return TCciSpAuthCreateTokenArgs__TargetSpCode_DEFAULT
	}
	return *p.TargetSpCode
}
func (p *TCciSpAuthCreateTokenArgs_) IsSetVersion() bool {
	return p.Version != TCciSpAuthCreateTokenArgs__Version_DEFAULT
}

func (p *TCciSpAuthCreateTokenArgs_) IsSetRequestMillis() bool {
	return p.RequestMillis != TCciSpAuthCreateTokenArgs__RequestMillis_DEFAULT
}

func (p *TCciSpAuthCreateTokenArgs_) IsSetRequestNonce() bool {
	return p.RequestNonce != nil
}

func (p *TCciSpAuthCreateTokenArgs_) IsSetSpCode() bool {
	return p.SpCode != nil
}

func (p *TCciSpAuthCreateTokenArgs_) IsSetTargetSpCode() bool {
	return p.TargetSpCode != nil
}

func (p *TCciSpAuthCreateTokenArgs_) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 10:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField10(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 20:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField20(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 30:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField30(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 40:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField40(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 50:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField50(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCciSpAuthCreateTokenArgs_) ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		temp := TCciSpAuthVersion(v)
		p.Version = temp
	}
	return nil
}

func (p *TCciSpAuthCreateTokenArgs_) ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.RequestMillis = v
	}
	return nil
}

func (p *TCciSpAuthCreateTokenArgs_) ReadField30(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 30: ", err)
	} else {
		p.RequestNonce = v
	}
	return nil
}

func (p *TCciSpAuthCreateTokenArgs_) ReadField40(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 40: ", err)
	} else {
		p.SpCode = &v
	}
	return nil
}

func (p *TCciSpAuthCreateTokenArgs_) ReadField50(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 50: ", err)
	} else {
		p.TargetSpCode = &v
	}
	return nil
}

func (p *TCciSpAuthCreateTokenArgs_) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TCciSpAuthCreateTokenArgs"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField10(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField20(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField30(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField40(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField50(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCciSpAuthCreateTokenArgs_) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err := oprot.WriteFieldBegin(ctx, "version", thrift.I32, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:version: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(p.Version)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.version (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:version: ", p), err)
		}
	}
	return err
}

func (p *TCciSpAuthCreateTokenArgs_) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestMillis() {
		if err := oprot.WriteFieldBegin(ctx, "requestMillis", thrift.I64, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:requestMillis: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(p.RequestMillis)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.requestMillis (20) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:requestMillis: ", p), err)
		}
	}
	return err
}

func (p *TCciSpAuthCreateTokenArgs_) writeField30(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestNonce() {
		if err := oprot.WriteFieldBegin(ctx, "requestNonce", thrift.STRING, 30); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:requestNonce: ", p), err)
		}
		if err := oprot.WriteBinary(ctx, p.RequestNonce); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.requestNonce (30) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 30:requestNonce: ", p), err)
		}
	}
	return err
}

func (p *TCciSpAuthCreateTokenArgs_) writeField40(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSpCode() {
		if err := oprot.WriteFieldBegin(ctx, "spCode", thrift.STRING, 40); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:spCode: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.SpCode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.spCode (40) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 40:spCode: ", p), err)
		}
	}
	return err
}

func (p *TCciSpAuthCreateTokenArgs_) writeField50(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTargetSpCode() {
		if err := oprot.WriteFieldBegin(ctx, "targetSpCode", thrift.STRING, 50); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 50:targetSpCode: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.TargetSpCode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.targetSpCode (50) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 50:targetSpCode: ", p), err)
		}
	}
	return err
}

func (p *TCciSpAuthCreateTokenArgs_) Equals(other *TCciSpAuthCreateTokenArgs_) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Version != other.Version {
		return false
	}
	if p.RequestMillis != other.RequestMillis {
		return false
	}
	if bytes.Compare(p.RequestNonce, other.RequestNonce) != 0 {
		return false
	}
	if p.SpCode != other.SpCode {
		if p.SpCode == nil || other.SpCode == nil {
			return false
		}
		if (*p.SpCode) != (*other.SpCode) {
			return false
		}
	}
	if p.TargetSpCode != other.TargetSpCode {
		if p.TargetSpCode == nil || other.TargetSpCode == nil {
			return false
		}
		if (*p.TargetSpCode) != (*other.TargetSpCode) {
			return false
		}
	}
	return true
}

func (p *TCciSpAuthCreateTokenArgs_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCciSpAuthCreateTokenArgs_(%+v)", *p)
}

func (p *TCciSpAuthCreateTokenArgs_) Validate() error {
	return nil
}

// Attributes:
//   - Version
//   - RequestMillis
//   - RequestNonce
//   - TokenId
type TCciSpAuthTokenDataArgs_ struct {
	// unused fields # 1 to 9
	Version TCciSpAuthVersion `thrift:"version,10" db:"version" json:"version"`
	// unused fields # 11 to 19
	RequestMillis int64 `thrift:"requestMillis,20" db:"requestMillis" json:"requestMillis"`
	// unused fields # 21 to 29
	RequestNonce []byte `thrift:"requestNonce,30" db:"requestNonce" json:"requestNonce,omitempty"`
	// unused fields # 31 to 39
	TokenId []byte `thrift:"tokenId,40" db:"tokenId" json:"tokenId,omitempty"`
}

func NewTCciSpAuthTokenDataArgs_() *TCciSpAuthTokenDataArgs_ {
	return &TCciSpAuthTokenDataArgs_{
		Version: 1,
	}
}

var TCciSpAuthTokenDataArgs__Version_DEFAULT TCciSpAuthVersion = 1

func (p *TCciSpAuthTokenDataArgs_) GetVersion() TCciSpAuthVersion {
	return p.Version
}

var TCciSpAuthTokenDataArgs__RequestMillis_DEFAULT int64 = 0

func (p *TCciSpAuthTokenDataArgs_) GetRequestMillis() int64 {
	return p.RequestMillis
}

var TCciSpAuthTokenDataArgs__RequestNonce_DEFAULT []byte

func (p *TCciSpAuthTokenDataArgs_) GetRequestNonce() []byte {
	return p.RequestNonce
}

var TCciSpAuthTokenDataArgs__TokenId_DEFAULT []byte

func (p *TCciSpAuthTokenDataArgs_) GetTokenId() []byte {
	return p.TokenId
}
func (p *TCciSpAuthTokenDataArgs_) IsSetVersion() bool {
	return p.Version != TCciSpAuthTokenDataArgs__Version_DEFAULT
}

func (p *TCciSpAuthTokenDataArgs_) IsSetRequestMillis() bool {
	return p.RequestMillis != TCciSpAuthTokenDataArgs__RequestMillis_DEFAULT
}

func (p *TCciSpAuthTokenDataArgs_) IsSetRequestNonce() bool {
	return p.RequestNonce != nil
}

func (p *TCciSpAuthTokenDataArgs_) IsSetTokenId() bool {
	return p.TokenId != nil
}

func (p *TCciSpAuthTokenDataArgs_) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 10:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField10(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 20:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField20(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 30:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField30(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 40:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField40(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCciSpAuthTokenDataArgs_) ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		temp := TCciSpAuthVersion(v)
		p.Version = temp
	}
	return nil
}

func (p *TCciSpAuthTokenDataArgs_) ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.RequestMillis = v
	}
	return nil
}

func (p *TCciSpAuthTokenDataArgs_) ReadField30(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 30: ", err)
	} else {
		p.RequestNonce = v
	}
	return nil
}

func (p *TCciSpAuthTokenDataArgs_) ReadField40(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 40: ", err)
	} else {
		p.TokenId = v
	}
	return nil
}

func (p *TCciSpAuthTokenDataArgs_) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TCciSpAuthTokenDataArgs"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField10(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField20(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField30(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField40(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCciSpAuthTokenDataArgs_) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err := oprot.WriteFieldBegin(ctx, "version", thrift.I32, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:version: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(p.Version)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.version (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:version: ", p), err)
		}
	}
	return err
}

func (p *TCciSpAuthTokenDataArgs_) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestMillis() {
		if err := oprot.WriteFieldBegin(ctx, "requestMillis", thrift.I64, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:requestMillis: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(p.RequestMillis)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.requestMillis (20) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:requestMillis: ", p), err)
		}
	}
	return err
}

func (p *TCciSpAuthTokenDataArgs_) writeField30(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestNonce() {
		if err := oprot.WriteFieldBegin(ctx, "requestNonce", thrift.STRING, 30); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:requestNonce: ", p), err)
		}
		if err := oprot.WriteBinary(ctx, p.RequestNonce); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.requestNonce (30) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 30:requestNonce: ", p), err)
		}
	}
	return err
}

func (p *TCciSpAuthTokenDataArgs_) writeField40(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTokenId() {
		if err := oprot.WriteFieldBegin(ctx, "tokenId", thrift.STRING, 40); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:tokenId: ", p), err)
		}
		if err := oprot.WriteBinary(ctx, p.TokenId); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.tokenId (40) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 40:tokenId: ", p), err)
		}
	}
	return err
}

func (p *TCciSpAuthTokenDataArgs_) Equals(other *TCciSpAuthTokenDataArgs_) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Version != other.Version {
		return false
	}
	if p.RequestMillis != other.RequestMillis {
		return false
	}
	if bytes.Compare(p.RequestNonce, other.RequestNonce) != 0 {
		return false
	}
	if bytes.Compare(p.TokenId, other.TokenId) != 0 {
		return false
	}
	return true
}

func (p *TCciSpAuthTokenDataArgs_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCciSpAuthTokenDataArgs_(%+v)", *p)
}

func (p *TCciSpAuthTokenDataArgs_) Validate() error {
	return nil
}

// Attributes:
//   - Version
//   - TokenId
//   - ExpireMillis
//   - SpCode
//   - TargetSpCode
//   - Permissions
type TCciSpAuthTokenData struct {
	// unused fields # 1 to 9
	Version TCciSpAuthVersion `thrift:"version,10" db:"version" json:"version"`
	// unused fields # 11 to 19
	TokenId []byte `thrift:"tokenId,20" db:"tokenId" json:"tokenId,omitempty"`
	// unused fields # 21 to 29
	ExpireMillis int64 `thrift:"expireMillis,30" db:"expireMillis" json:"expireMillis"`
	// unused fields # 31 to 39
	SpCode *string `thrift:"spCode,40" db:"spCode" json:"spCode,omitempty"`
	// unused fields # 41 to 49
	TargetSpCode *string `thrift:"targetSpCode,50" db:"targetSpCode" json:"targetSpCode,omitempty"`
	// unused fields # 51 to 59
	Permissions []*TokenDataPerm `thrift:"permissions,60" db:"permissions" json:"permissions,omitempty"`
}

func NewTCciSpAuthTokenData() *TCciSpAuthTokenData {
	return &TCciSpAuthTokenData{
		Version: 1,
	}
}

var TCciSpAuthTokenData_Version_DEFAULT TCciSpAuthVersion = 1

func (p *TCciSpAuthTokenData) GetVersion() TCciSpAuthVersion {
	return p.Version
}

var TCciSpAuthTokenData_TokenId_DEFAULT []byte

func (p *TCciSpAuthTokenData) GetTokenId() []byte {
	return p.TokenId
}

var TCciSpAuthTokenData_ExpireMillis_DEFAULT int64 = 0

func (p *TCciSpAuthTokenData) GetExpireMillis() int64 {
	return p.ExpireMillis
}

var TCciSpAuthTokenData_SpCode_DEFAULT string

func (p *TCciSpAuthTokenData) GetSpCode() string {
	if !p.IsSetSpCode() {
		return TCciSpAuthTokenData_SpCode_DEFAULT
	}
	return *p.SpCode
}

var TCciSpAuthTokenData_TargetSpCode_DEFAULT string

func (p *TCciSpAuthTokenData) GetTargetSpCode() string {
	if !p.IsSetTargetSpCode() {
		return TCciSpAuthTokenData_TargetSpCode_DEFAULT
	}
	return *p.TargetSpCode
}

var TCciSpAuthTokenData_Permissions_DEFAULT []*TokenDataPerm

func (p *TCciSpAuthTokenData) GetPermissions() []*TokenDataPerm {
	return p.Permissions
}
func (p *TCciSpAuthTokenData) IsSetVersion() bool {
	return p.Version != TCciSpAuthTokenData_Version_DEFAULT
}

func (p *TCciSpAuthTokenData) IsSetTokenId() bool {
	return p.TokenId != nil
}

func (p *TCciSpAuthTokenData) IsSetExpireMillis() bool {
	return p.ExpireMillis != TCciSpAuthTokenData_ExpireMillis_DEFAULT
}

func (p *TCciSpAuthTokenData) IsSetSpCode() bool {
	return p.SpCode != nil
}

func (p *TCciSpAuthTokenData) IsSetTargetSpCode() bool {
	return p.TargetSpCode != nil
}

func (p *TCciSpAuthTokenData) IsSetPermissions() bool {
	return p.Permissions != nil
}

func (p *TCciSpAuthTokenData) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 10:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField10(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 20:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField20(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 30:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField30(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 40:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField40(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 50:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField50(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 60:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField60(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCciSpAuthTokenData) ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		temp := TCciSpAuthVersion(v)
		p.Version = temp
	}
	return nil
}

func (p *TCciSpAuthTokenData) ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.TokenId = v
	}
	return nil
}

func (p *TCciSpAuthTokenData) ReadField30(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 30: ", err)
	} else {
		p.ExpireMillis = v
	}
	return nil
}

func (p *TCciSpAuthTokenData) ReadField40(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 40: ", err)
	} else {
		p.SpCode = &v
	}
	return nil
}

func (p *TCciSpAuthTokenData) ReadField50(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 50: ", err)
	} else {
		p.TargetSpCode = &v
	}
	return nil
}

func (p *TCciSpAuthTokenData) ReadField60(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TokenDataPerm, 0, size)
	p.Permissions = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &TokenDataPerm{}
		if err := _elem0.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.Permissions = append(p.Permissions, _elem0)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TCciSpAuthTokenData) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TCciSpAuthTokenData"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField10(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField20(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField30(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField40(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField50(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField60(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCciSpAuthTokenData) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err := oprot.WriteFieldBegin(ctx, "version", thrift.I32, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:version: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(p.Version)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.version (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:version: ", p), err)
		}
	}
	return err
}

func (p *TCciSpAuthTokenData) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTokenId() {
		if err := oprot.WriteFieldBegin(ctx, "tokenId", thrift.STRING, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:tokenId: ", p), err)
		}
		if err := oprot.WriteBinary(ctx, p.TokenId); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.tokenId (20) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:tokenId: ", p), err)
		}
	}
	return err
}

func (p *TCciSpAuthTokenData) writeField30(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetExpireMillis() {
		if err := oprot.WriteFieldBegin(ctx, "expireMillis", thrift.I64, 30); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:expireMillis: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(p.ExpireMillis)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.expireMillis (30) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 30:expireMillis: ", p), err)
		}
	}
	return err
}

func (p *TCciSpAuthTokenData) writeField40(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSpCode() {
		if err := oprot.WriteFieldBegin(ctx, "spCode", thrift.STRING, 40); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:spCode: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.SpCode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.spCode (40) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 40:spCode: ", p), err)
		}
	}
	return err
}

func (p *TCciSpAuthTokenData) writeField50(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTargetSpCode() {
		if err := oprot.WriteFieldBegin(ctx, "targetSpCode", thrift.STRING, 50); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 50:targetSpCode: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.TargetSpCode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.targetSpCode (50) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 50:targetSpCode: ", p), err)
		}
	}
	return err
}

func (p *TCciSpAuthTokenData) writeField60(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetPermissions() {
		if err := oprot.WriteFieldBegin(ctx, "permissions", thrift.LIST, 60); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 60:permissions: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Permissions)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Permissions {
			if err := v.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 60:permissions: ", p), err)
		}
	}
	return err
}

func (p *TCciSpAuthTokenData) Equals(other *TCciSpAuthTokenData) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Version != other.Version {
		return false
	}
	if bytes.Compare(p.TokenId, other.TokenId) != 0 {
		return false
	}
	if p.ExpireMillis != other.ExpireMillis {
		return false
	}
	if p.SpCode != other.SpCode {
		if p.SpCode == nil || other.SpCode == nil {
			return false
		}
		if (*p.SpCode) != (*other.SpCode) {
			return false
		}
	}
	if p.TargetSpCode != other.TargetSpCode {
		if p.TargetSpCode == nil || other.TargetSpCode == nil {
			return false
		}
		if (*p.TargetSpCode) != (*other.TargetSpCode) {
			return false
		}
	}
	if len(p.Permissions) != len(other.Permissions) {
		return false
	}
	for i, _tgt := range p.Permissions {
		_src1 := other.Permissions[i]
		if !_tgt.Equals(_src1) {
			return false
		}
	}
	return true
}

func (p *TCciSpAuthTokenData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCciSpAuthTokenData(%+v)", *p)
}

func (p *TCciSpAuthTokenData) Validate() error {
	return nil
}

// Attributes:
//   - Version
//   - ResponseMillis
//   - ResponseNonce
//   - Result_
//   - ResultMessage
//   - TokenData
type TCciSpAuthTokenResult_ struct {
	// unused fields # 1 to 9
	Version TCciSpAuthVersion `thrift:"version,10" db:"version" json:"version"`
	// unused fields # 11 to 19
	ResponseMillis int64 `thrift:"responseMillis,20" db:"responseMillis" json:"responseMillis"`
	// unused fields # 21 to 29
	ResponseNonce []byte `thrift:"responseNonce,30" db:"responseNonce" json:"responseNonce,omitempty"`
	// unused fields # 31 to 39
	Result_ string `thrift:"result,40" db:"result" json:"result"`
	// unused fields # 41 to 49
	ResultMessage string `thrift:"resultMessage,50" db:"resultMessage" json:"resultMessage"`
	// unused fields # 51 to 59
	TokenData *TCciSpAuthTokenData `thrift:"tokenData,60" db:"tokenData" json:"tokenData,omitempty"`
}

func NewTCciSpAuthTokenResult_() *TCciSpAuthTokenResult_ {
	return &TCciSpAuthTokenResult_{
		Version: 1,

		Result_: "SUCCESS",
	}
}

var TCciSpAuthTokenResult__Version_DEFAULT TCciSpAuthVersion = 1

func (p *TCciSpAuthTokenResult_) GetVersion() TCciSpAuthVersion {
	return p.Version
}

var TCciSpAuthTokenResult__ResponseMillis_DEFAULT int64 = 0

func (p *TCciSpAuthTokenResult_) GetResponseMillis() int64 {
	return p.ResponseMillis
}

var TCciSpAuthTokenResult__ResponseNonce_DEFAULT []byte

func (p *TCciSpAuthTokenResult_) GetResponseNonce() []byte {
	return p.ResponseNonce
}

var TCciSpAuthTokenResult__Result__DEFAULT string = "SUCCESS"

func (p *TCciSpAuthTokenResult_) GetResult_() string {
	return p.Result_
}

var TCciSpAuthTokenResult__ResultMessage_DEFAULT string = ""

func (p *TCciSpAuthTokenResult_) GetResultMessage() string {
	return p.ResultMessage
}

var TCciSpAuthTokenResult__TokenData_DEFAULT *TCciSpAuthTokenData

func (p *TCciSpAuthTokenResult_) GetTokenData() *TCciSpAuthTokenData {
	if !p.IsSetTokenData() {
		return TCciSpAuthTokenResult__TokenData_DEFAULT
	}
	return p.TokenData
}
func (p *TCciSpAuthTokenResult_) IsSetVersion() bool {
	return p.Version != TCciSpAuthTokenResult__Version_DEFAULT
}

func (p *TCciSpAuthTokenResult_) IsSetResponseMillis() bool {
	return p.ResponseMillis != TCciSpAuthTokenResult__ResponseMillis_DEFAULT
}

func (p *TCciSpAuthTokenResult_) IsSetResponseNonce() bool {
	return p.ResponseNonce != nil
}

func (p *TCciSpAuthTokenResult_) IsSetResult_() bool {
	return p.Result_ != TCciSpAuthTokenResult__Result__DEFAULT
}

func (p *TCciSpAuthTokenResult_) IsSetResultMessage() bool {
	return p.ResultMessage != TCciSpAuthTokenResult__ResultMessage_DEFAULT
}

func (p *TCciSpAuthTokenResult_) IsSetTokenData() bool {
	return p.TokenData != nil
}

func (p *TCciSpAuthTokenResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 10:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField10(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 20:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField20(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 30:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField30(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 40:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField40(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 50:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField50(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 60:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField60(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCciSpAuthTokenResult_) ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		temp := TCciSpAuthVersion(v)
		p.Version = temp
	}
	return nil
}

func (p *TCciSpAuthTokenResult_) ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.ResponseMillis = v
	}
	return nil
}

func (p *TCciSpAuthTokenResult_) ReadField30(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 30: ", err)
	} else {
		p.ResponseNonce = v
	}
	return nil
}

func (p *TCciSpAuthTokenResult_) ReadField40(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 40: ", err)
	} else {
		p.Result_ = v
	}
	return nil
}

func (p *TCciSpAuthTokenResult_) ReadField50(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 50: ", err)
	} else {
		p.ResultMessage = v
	}
	return nil
}

func (p *TCciSpAuthTokenResult_) ReadField60(ctx context.Context, iprot thrift.TProtocol) error {
	p.TokenData = &TCciSpAuthTokenData{
		Version: 1,
	}
	if err := p.TokenData.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TokenData), err)
	}
	return nil
}

func (p *TCciSpAuthTokenResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TCciSpAuthTokenResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField10(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField20(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField30(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField40(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField50(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField60(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCciSpAuthTokenResult_) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err := oprot.WriteFieldBegin(ctx, "version", thrift.I32, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:version: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(p.Version)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.version (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:version: ", p), err)
		}
	}
	return err
}

func (p *TCciSpAuthTokenResult_) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetResponseMillis() {
		if err := oprot.WriteFieldBegin(ctx, "responseMillis", thrift.I64, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:responseMillis: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(p.ResponseMillis)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.responseMillis (20) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:responseMillis: ", p), err)
		}
	}
	return err
}

func (p *TCciSpAuthTokenResult_) writeField30(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetResponseNonce() {
		if err := oprot.WriteFieldBegin(ctx, "responseNonce", thrift.STRING, 30); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:responseNonce: ", p), err)
		}
		if err := oprot.WriteBinary(ctx, p.ResponseNonce); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.responseNonce (30) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 30:responseNonce: ", p), err)
		}
	}
	return err
}

func (p *TCciSpAuthTokenResult_) writeField40(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetResult_() {
		if err := oprot.WriteFieldBegin(ctx, "result", thrift.STRING, 40); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:result: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(p.Result_)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.result (40) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 40:result: ", p), err)
		}
	}
	return err
}

func (p *TCciSpAuthTokenResult_) writeField50(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetResultMessage() {
		if err := oprot.WriteFieldBegin(ctx, "resultMessage", thrift.STRING, 50); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 50:resultMessage: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(p.ResultMessage)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.resultMessage (50) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 50:resultMessage: ", p), err)
		}
	}
	return err
}

func (p *TCciSpAuthTokenResult_) writeField60(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTokenData() {
		if err := oprot.WriteFieldBegin(ctx, "tokenData", thrift.STRUCT, 60); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 60:tokenData: ", p), err)
		}
		if err := p.TokenData.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TokenData), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 60:tokenData: ", p), err)
		}
	}
	return err
}

func (p *TCciSpAuthTokenResult_) Equals(other *TCciSpAuthTokenResult_) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Version != other.Version {
		return false
	}
	if p.ResponseMillis != other.ResponseMillis {
		return false
	}
	if bytes.Compare(p.ResponseNonce, other.ResponseNonce) != 0 {
		return false
	}
	if p.Result_ != other.Result_ {
		return false
	}
	if p.ResultMessage != other.ResultMessage {
		return false
	}
	if !p.TokenData.Equals(other.TokenData) {
		return false
	}
	return true
}

func (p *TCciSpAuthTokenResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCciSpAuthTokenResult_(%+v)", *p)
}

func (p *TCciSpAuthTokenResult_) Validate() error {
	return nil
}

type TCciSpAuth interface {
	// Parameters:
	//  - Arguments
	CreateToken(ctx context.Context, arguments *TCciSpAuthCreateTokenArgs_) (_r *TCciSpAuthTokenResult_, _err error)
	// Parameters:
	//  - Arguments
	TokenData(ctx context.Context, arguments *TCciSpAuthTokenDataArgs_) (_r *TCciSpAuthTokenResult_, _err error)
}

type TCciSpAuthClient struct {
	c    thrift.TClient
	meta thrift.ResponseMeta
}

func NewTCciSpAuthClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TCciSpAuthClient {
	return &TCciSpAuthClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewTCciSpAuthClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TCciSpAuthClient {
	return &TCciSpAuthClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewTCciSpAuthClient(c thrift.TClient) *TCciSpAuthClient {
	return &TCciSpAuthClient{
		c: c,
	}
}

func (p *TCciSpAuthClient) Client_() thrift.TClient {
	return p.c
}

func (p *TCciSpAuthClient) LastResponseMeta_() thrift.ResponseMeta {
	return p.meta
}

func (p *TCciSpAuthClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
	p.meta = meta
}

// Parameters:
//   - Arguments
func (p *TCciSpAuthClient) CreateToken(ctx context.Context, arguments *TCciSpAuthCreateTokenArgs_) (_r *TCciSpAuthTokenResult_, _err error) {
	var _args2 TCciSpAuthCreateTokenArgs
	_args2.Arguments = arguments
	var _result4 TCciSpAuthCreateTokenResult
	var _meta3 thrift.ResponseMeta
	_meta3, _err = p.Client_().Call(ctx, "createToken", &_args2, &_result4)
	p.SetLastResponseMeta_(_meta3)
	if _err != nil {
		return
	}
	if _ret5 := _result4.GetSuccess(); _ret5 != nil {
		return _ret5, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "createToken failed: unknown result")
}

// Parameters:
//   - Arguments
func (p *TCciSpAuthClient) TokenData(ctx context.Context, arguments *TCciSpAuthTokenDataArgs_) (_r *TCciSpAuthTokenResult_, _err error) {
	var _args6 TCciSpAuthTokenDataArgs
	_args6.Arguments = arguments
	var _result8 TCciSpAuthTokenDataResult
	var _meta7 thrift.ResponseMeta
	_meta7, _err = p.Client_().Call(ctx, "tokenData", &_args6, &_result8)
	p.SetLastResponseMeta_(_meta7)
	if _err != nil {
		return
	}
	if _ret9 := _result8.GetSuccess(); _ret9 != nil {
		return _ret9, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "tokenData failed: unknown result")
}

type TCciSpAuthProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      TCciSpAuth
}

func (p *TCciSpAuthProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *TCciSpAuthProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *TCciSpAuthProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewTCciSpAuthProcessor(handler TCciSpAuth) *TCciSpAuthProcessor {

	self10 := &TCciSpAuthProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self10.processorMap["createToken"] = &tCciSpAuthProcessorCreateToken{handler: handler}
	self10.processorMap["tokenData"] = &tCciSpAuthProcessorTokenData{handler: handler}
	return self10
}

func (p *TCciSpAuthProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
	if err2 != nil {
		return false, thrift.WrapTException(err2)
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(ctx, thrift.STRUCT)
	iprot.ReadMessageEnd(ctx)
	x11 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
	x11.Write(ctx, oprot)
	oprot.WriteMessageEnd(ctx)
	oprot.Flush(ctx)
	return false, x11

}

type tCciSpAuthProcessorCreateToken struct {
	handler TCciSpAuth
}

func (p *tCciSpAuthProcessorCreateToken) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err12 error
	args := TCciSpAuthCreateTokenArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "createToken", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := TCciSpAuthCreateTokenResult{}
	if retval, err2 := p.handler.CreateToken(ctx, args.Arguments); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc13 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createToken: "+err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "createToken", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err12 = thrift.WrapTException(err2)
		}
		if err2 := _exc13.Write(ctx, oprot); _write_err12 == nil && err2 != nil {
			_write_err12 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err12 == nil && err2 != nil {
			_write_err12 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err12 == nil && err2 != nil {
			_write_err12 = thrift.WrapTException(err2)
		}
		if _write_err12 != nil {
			return false, thrift.WrapTException(_write_err12)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "createToken", thrift.REPLY, seqId); err2 != nil {
		_write_err12 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err12 == nil && err2 != nil {
		_write_err12 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err12 == nil && err2 != nil {
		_write_err12 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err12 == nil && err2 != nil {
		_write_err12 = thrift.WrapTException(err2)
	}
	if _write_err12 != nil {
		return false, thrift.WrapTException(_write_err12)
	}
	return true, err
}

type tCciSpAuthProcessorTokenData struct {
	handler TCciSpAuth
}

func (p *tCciSpAuthProcessorTokenData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err14 error
	args := TCciSpAuthTokenDataArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "tokenData", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := TCciSpAuthTokenDataResult{}
	if retval, err2 := p.handler.TokenData(ctx, args.Arguments); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc15 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing tokenData: "+err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "tokenData", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err14 = thrift.WrapTException(err2)
		}
		if err2 := _exc15.Write(ctx, oprot); _write_err14 == nil && err2 != nil {
			_write_err14 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err14 == nil && err2 != nil {
			_write_err14 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err14 == nil && err2 != nil {
			_write_err14 = thrift.WrapTException(err2)
		}
		if _write_err14 != nil {
			return false, thrift.WrapTException(_write_err14)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "tokenData", thrift.REPLY, seqId); err2 != nil {
		_write_err14 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err14 == nil && err2 != nil {
		_write_err14 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err14 == nil && err2 != nil {
		_write_err14 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err14 == nil && err2 != nil {
		_write_err14 = thrift.WrapTException(err2)
	}
	if _write_err14 != nil {
		return false, thrift.WrapTException(_write_err14)
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//   - Arguments
type TCciSpAuthCreateTokenArgs struct {
	Arguments *TCciSpAuthCreateTokenArgs_ `thrift:"arguments,1" db:"arguments" json:"arguments"`
}

func NewTCciSpAuthCreateTokenArgs() *TCciSpAuthCreateTokenArgs {
	return &TCciSpAuthCreateTokenArgs{}
}

var TCciSpAuthCreateTokenArgs_Arguments_DEFAULT *TCciSpAuthCreateTokenArgs_

func (p *TCciSpAuthCreateTokenArgs) GetArguments() *TCciSpAuthCreateTokenArgs_ {
	if !p.IsSetArguments() {
		return TCciSpAuthCreateTokenArgs_Arguments_DEFAULT
	}
	return p.Arguments
}
func (p *TCciSpAuthCreateTokenArgs) IsSetArguments() bool {
	return p.Arguments != nil
}

func (p *TCciSpAuthCreateTokenArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCciSpAuthCreateTokenArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Arguments = &TCciSpAuthCreateTokenArgs_{
		Version: 1,
	}
	if err := p.Arguments.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Arguments), err)
	}
	return nil
}

func (p *TCciSpAuthCreateTokenArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "createToken_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCciSpAuthCreateTokenArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "arguments", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:arguments: ", p), err)
	}
	if err := p.Arguments.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Arguments), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:arguments: ", p), err)
	}
	return err
}

func (p *TCciSpAuthCreateTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCciSpAuthCreateTokenArgs(%+v)", *p)
}

// Attributes:
//   - Success
type TCciSpAuthCreateTokenResult struct {
	Success *TCciSpAuthTokenResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTCciSpAuthCreateTokenResult() *TCciSpAuthCreateTokenResult {
	return &TCciSpAuthCreateTokenResult{}
}

var TCciSpAuthCreateTokenResult_Success_DEFAULT *TCciSpAuthTokenResult_

func (p *TCciSpAuthCreateTokenResult) GetSuccess() *TCciSpAuthTokenResult_ {
	if !p.IsSetSuccess() {
		return TCciSpAuthCreateTokenResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TCciSpAuthCreateTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TCciSpAuthCreateTokenResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCciSpAuthCreateTokenResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &TCciSpAuthTokenResult_{
		Version: 1,

		Result_: "SUCCESS",
	}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TCciSpAuthCreateTokenResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "createToken_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCciSpAuthCreateTokenResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TCciSpAuthCreateTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCciSpAuthCreateTokenResult(%+v)", *p)
}

// Attributes:
//   - Arguments
type TCciSpAuthTokenDataArgs struct {
	Arguments *TCciSpAuthTokenDataArgs_ `thrift:"arguments,1" db:"arguments" json:"arguments"`
}

func NewTCciSpAuthTokenDataArgs() *TCciSpAuthTokenDataArgs {
	return &TCciSpAuthTokenDataArgs{}
}

var TCciSpAuthTokenDataArgs_Arguments_DEFAULT *TCciSpAuthTokenDataArgs_

func (p *TCciSpAuthTokenDataArgs) GetArguments() *TCciSpAuthTokenDataArgs_ {
	if !p.IsSetArguments() {
		return TCciSpAuthTokenDataArgs_Arguments_DEFAULT
	}
	return p.Arguments
}
func (p *TCciSpAuthTokenDataArgs) IsSetArguments() bool {
	return p.Arguments != nil
}

func (p *TCciSpAuthTokenDataArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCciSpAuthTokenDataArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Arguments = &TCciSpAuthTokenDataArgs_{
		Version: 1,
	}
	if err := p.Arguments.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Arguments), err)
	}
	return nil
}

func (p *TCciSpAuthTokenDataArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "tokenData_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCciSpAuthTokenDataArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "arguments", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:arguments: ", p), err)
	}
	if err := p.Arguments.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Arguments), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:arguments: ", p), err)
	}
	return err
}

func (p *TCciSpAuthTokenDataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCciSpAuthTokenDataArgs(%+v)", *p)
}

// Attributes:
//   - Success
type TCciSpAuthTokenDataResult struct {
	Success *TCciSpAuthTokenResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTCciSpAuthTokenDataResult() *TCciSpAuthTokenDataResult {
	return &TCciSpAuthTokenDataResult{}
}

var TCciSpAuthTokenDataResult_Success_DEFAULT *TCciSpAuthTokenResult_

func (p *TCciSpAuthTokenDataResult) GetSuccess() *TCciSpAuthTokenResult_ {
	if !p.IsSetSuccess() {
		return TCciSpAuthTokenDataResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TCciSpAuthTokenDataResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TCciSpAuthTokenDataResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCciSpAuthTokenDataResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &TCciSpAuthTokenResult_{
		Version: 1,

		Result_: "SUCCESS",
	}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TCciSpAuthTokenDataResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "tokenData_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCciSpAuthTokenDataResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TCciSpAuthTokenDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCciSpAuthTokenDataResult(%+v)", *p)
}
